// This file is auto-generated by @hey-api/openapi-ts

import { getSession } from 'next-auth/react';
import type { ClientOptions } from './types.gen';
import {
  type Config,
  type ClientOptions as DefaultClientOptions,
  createClient,
  createConfig
} from '@hey-api/client-axios';
import { refreshToken } from './sdk.gen';

/**
 * The `createClientConfig()` function will be called on client initialization
 * and the returned object will become the client's initial configuration.
 *
 * You may want to initialize your client this way instead of calling
 * `setConfig()`. This is useful for example if you're using Next.js
 * to ensure your client always has the correct values.
 */
export type CreateClientConfig<T extends DefaultClientOptions = ClientOptions> =
  (
    override?: Config<DefaultClientOptions & T>
  ) => Config<Required<DefaultClientOptions> & T>;

export const client = createClient(
  createConfig<ClientOptions>({
    baseURL: 'https://dev.api.yajasu.kr'
  })
);

client.instance.interceptors.request.use(async (config) => {
  // Skip interceptor for login endpoint
  if (
    config.url === '/auth/login' ||
    config.url === '/auth/logout' ||
    config.url === '/users/me'
  ) {
    return config;
  }

  const session = await getSession();

  if (session?.user?.accessToken) {
    config.headers.Authorization = `Bearer ${session.user.accessToken}`;
  }
  return config;
});

// ✅ 응답 인터셉터: 401 에러 발생 시 자동으로 `refreshToken` 호출
client.instance.interceptors.response.use(
  (response) => response, // 정상 응답은 그대로 반환
  async (error) => {
    const originalRequest = error.config;

    // 401 Unauthorized 발생 시 Refresh Token 사용
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true; // 무한 루프 방지

      try {
        const session = await getSession();
        if (!session?.user?.refreshToken) {
          throw new Error('No refresh token available');
        }

        // ✅ `refreshToken` API 호출
        const refreshResponse = await refreshToken({
          client, // hey-api의 클라이언트 사용
          body: {
            refresh_token: session.user.refreshToken
          }
        });

        if (!refreshResponse || !refreshResponse.data?.data?.access_token) {
          throw new Error('Failed to refresh token');
        }

        const newAccessToken = refreshResponse.data.data.access_token;

        // ✅ 새로운 Access Token을 Axios 요청에 적용
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;

        // ✅ 기존 요청 다시 실행
        return client.instance(originalRequest);
      } catch (refreshError) {
        console.error('Token refresh failed', refreshError);
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);
