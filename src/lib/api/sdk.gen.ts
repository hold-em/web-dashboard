// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client
} from '@hey-api/client-axios';
import type {
  FindByIdData,
  FindByIdResponse,
  UpdateData,
  UpdateResponse,
  UpdateStoreData,
  UpdateStoreResponse,
  GetPaymentData,
  GetPaymentResponse,
  UpdatePaymentData,
  UpdatePaymentResponse,
  GetPayableItemData,
  GetPayableItemResponse,
  UpdatePayableItemData,
  UpdatePayableItemResponse,
  DeleteItemData,
  DeleteItemResponse,
  UpdateItemData,
  UpdateItemResponse,
  UpdateGameData,
  UpdateGameResponse,
  UpdateGameTableData,
  UpdateGameTableResponse,
  GetGameStructureTemplateData,
  GetGameStructureTemplateResponse,
  UpdateGameStructureTemplateData,
  UpdateGameStructureTemplateResponse,
  DeleteLeagueData,
  DeleteLeagueResponse,
  UpdateLeagueData,
  UpdateLeagueResponse,
  DeleteGameTypeData,
  DeleteGameTypeResponse,
  UpdateGameTypeData,
  UpdateGameTypeResponse,
  UseVouchersData,
  UseVouchersResponse,
  UnregisterDeviceTokenData,
  UnregisterDeviceTokenResponse,
  RegisterDeviceTokenData,
  RegisterDeviceTokenResponse,
  GetReservationData,
  GetReservationResponse,
  ReserveGameData,
  ReserveGameResponse,
  CancelReservationData,
  CancelReservationResponse,
  GetMadeOrdersInStoreData,
  GetMadeOrdersInStoreResponse,
  CreateOrderData,
  CreateOrderResponse,
  CancelOrderData,
  CancelOrderResponse,
  GetCreatedVoucherTemplatesData,
  GetCreatedVoucherTemplatesResponse,
  CreateVoucherTemplateData,
  CreateVoucherTemplateResponse,
  CreateVouchersData,
  CreateVouchersResponse,
  DisburseVouchersData,
  DisburseVouchersResponse,
  GetCreatedStoresData,
  GetCreatedStoresResponse,
  CreateStoreData,
  CreateStoreResponse,
  GetTodayStoreVisitsData,
  GetTodayStoreVisitsResponse,
  CreateTodayStoreVisitData,
  CreateTodayStoreVisitResponse,
  CreateTempUserData,
  CreateTempUserResponse,
  MergeTempUserData,
  MergeTempUserResponse,
  CreateGameData,
  CreateGameResponse,
  GetAwardedPointAwardsData,
  GetAwardedPointAwardsResponse,
  AwardPointData,
  AwardPointResponse,
  GetPaymentsInStoreData,
  GetPaymentsInStoreResponse,
  CreatePaymentData,
  CreatePaymentResponse,
  CancelPartialPaymentData,
  CancelPartialPaymentResponse,
  CancelPaymentData,
  CancelPaymentResponse,
  GetPayableItemsInStoreData,
  GetPayableItemsInStoreResponse,
  CreatePayableItemData,
  CreatePayableItemResponse,
  CreateItemData,
  CreateItemResponse,
  CompleteOrderData,
  CompleteOrderResponse,
  AcceptOrderData,
  AcceptOrderResponse,
  SendNotificationData,
  SendNotificationResponse,
  CreateGameTableData,
  CreateGameTableResponse,
  ChangeGameTableParticipantsData,
  ChangeGameTableParticipantsResponse,
  GetGameStructureTemplatesData,
  GetGameStructureTemplatesResponse,
  CreateGameStructureTemplateData,
  CreateGameStructureTemplateResponse,
  WithdrawData,
  WithdrawResponse,
  RegisterUserData,
  RegisterUserResponse,
  RegisterUserFromConnectingUserData,
  RegisterUserFromConnectingUserResponse,
  RefreshTokenData,
  RefreshTokenResponse,
  LogoutData,
  LogoutResponse,
  LoginData,
  LoginResponse,
  CheckAvailableNicknameData,
  CheckAvailableNicknameResponse,
  MakeManagerData,
  MakeManagerResponse,
  CreateLeagueData,
  CreateLeagueResponse,
  CreateGameTypeData,
  CreateGameTypeResponse,
  SetFileUploadCompletedData,
  SetFileUploadCompletedResponse,
  GetReceivedVouchersData,
  GetReceivedVouchersResponse,
  GetGamesInVisitedStoresData,
  GetGamesInVisitedStoresResponse,
  GetListData,
  GetListResponse,
  GetMeData,
  GetMeResponse,
  GetStoresData,
  GetStoresResponse,
  GetStoreData,
  GetStoreResponse,
  GetGamesData,
  GetGamesResponse,
  GetRecentlyVisitedStoresData,
  GetRecentlyVisitedStoresResponse,
  GetNearestStoresData,
  GetNearestStoresResponse,
  GetReservationsData,
  GetReservationsResponse,
  GetMyPointRankingsOfStoresData,
  GetMyPointRankingsOfStoresResponse,
  GetPointRankingsData,
  GetPointRankingsResponse,
  GetMyPointRankingData,
  GetMyPointRankingResponse,
  GetPointRankingsInLeagueData,
  GetPointRankingsInLeagueResponse,
  GetMyPointRankingInLeagueData,
  GetMyPointRankingInLeagueResponse,
  GetReceivedPointAwardsData,
  GetReceivedPointAwardsResponse,
  GetItemsInStoreData,
  GetItemsInStoreResponse,
  GetItemData,
  GetItemResponse,
  AuthorizeWithKakaoOAuthData,
  AuthorizeWithKakaoOAuthResponse,
  ProcessOAuthCallbackData,
  ProcessOAuthCallbackResponse,
  GetReceivedNotificationsData,
  GetReceivedNotificationsResponse,
  GetNotificationData,
  GetNotificationResponse,
  GetStoreUsersData,
  GetStoreUsersResponse,
  GetPaymentsInStoreOfUserData,
  GetPaymentsInStoreOfUserResponse,
  GetOrdersInStoreData,
  GetOrdersInStoreResponse,
  GetLeaguesData,
  GetLeaguesResponse,
  GetLeagueData,
  GetLeagueResponse,
  HealthData,
  HealthResponse,
  GetNotFinishedGamesData,
  GetNotFinishedGamesResponse,
  GetGameData,
  GetGameResponse,
  GetGameTablesData,
  GetGameTablesResponse,
  GetGameTypesData,
  GetGameTypesResponse,
  GetGameTypeData,
  GetGameTypeResponse,
  GetFilesData,
  GetFilesResponse,
  GetFileByIdData,
  GetFileByIdResponse,
  GetPresignedGetUrlData,
  GetPresignedGetUrlResponse,
  GetPresignedUploadUrlData,
  GetPresignedUploadUrlResponse,
  DeleteVoucherTemplateData,
  DeleteVoucherTemplateResponse
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const findById = <ThrowOnError extends boolean = false>(
  options: Options<FindByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    FindByIdResponse,
    unknown,
    ThrowOnError
  >({
    url: '/users/<userId>',
    ...options
  });
};

export const update = <ThrowOnError extends boolean = false>(
  options: Options<UpdateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/users/<userId>',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const updateStore = <ThrowOnError extends boolean = false>(
  options: Options<UpdateStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateStoreResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores/{storeId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getPayment = <ThrowOnError extends boolean = false>(
  options: Options<GetPaymentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payments/{paymentId}',
    ...options
  });
};

export const updatePayment = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePaymentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payments/{paymentId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getPayableItem = <ThrowOnError extends boolean = false>(
  options: Options<GetPayableItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPayableItemResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payable-items/{payableItemId}',
    ...options
  });
};

export const updatePayableItem = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePayableItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdatePayableItemResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payable-items/{payableItemId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const deleteItem = <ThrowOnError extends boolean = false>(
  options: Options<DeleteItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteItemResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/order/items/{itemId}',
    ...options
  });
};

export const updateItem = <ThrowOnError extends boolean = false>(
  options: Options<UpdateItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateItemResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/order/items/{itemId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const updateGame = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGameResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/games/{gameId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const updateGameTable = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGameTableData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGameTableResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/games/{gameId}/tables/{tableId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getGameStructureTemplate = <ThrowOnError extends boolean = false>(
  options: Options<GetGameStructureTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGameStructureTemplateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/games/structure-templates/{gameStructureTemplateId}',
    ...options
  });
};

export const updateGameStructureTemplate = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateGameStructureTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGameStructureTemplateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/games/structure-templates/{gameStructureTemplateId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const deleteLeague = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLeagueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteLeagueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/admin/leagues/{id}',
    ...options
  });
};

export const updateLeague = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLeagueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateLeagueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/admin/leagues/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const deleteGameType = <ThrowOnError extends boolean = false>(
  options: Options<DeleteGameTypeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteGameTypeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/admin/games/game-types/{gameTypeId}',
    ...options
  });
};

export const updateGameType = <ThrowOnError extends boolean = false>(
  options: Options<UpdateGameTypeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateGameTypeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/admin/games/game-types/{gameTypeId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const useVouchers = <ThrowOnError extends boolean = false>(
  options: Options<UseVouchersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    UseVouchersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/voucher-templates/{voucherTemplateId}/use-vouchers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const unregisterDeviceToken = <ThrowOnError extends boolean = false>(
  options: Options<UnregisterDeviceTokenData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    UnregisterDeviceTokenResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/users/device-token',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const registerDeviceToken = <ThrowOnError extends boolean = false>(
  options: Options<RegisterDeviceTokenData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterDeviceTokenResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/users/device-token',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getReservation = <ThrowOnError extends boolean = false>(
  options: Options<GetReservationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetReservationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/reservations/games/{gameId}',
    ...options
  });
};

export const reserveGame = <ThrowOnError extends boolean = false>(
  options: Options<ReserveGameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ReserveGameResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/reservations/games/{gameId}',
    ...options
  });
};

export const cancelReservation = <ThrowOnError extends boolean = false>(
  options: Options<CancelReservationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CancelReservationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/reservations/games/{gameId}/cancel',
    ...options
  });
};

export const getMadeOrdersInStore = <ThrowOnError extends boolean = false>(
  options: Options<GetMadeOrdersInStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMadeOrdersInStoreResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order/stores/{storeId}/orders',
    ...options
  });
};

export const createOrder = <ThrowOnError extends boolean = false>(
  options: Options<CreateOrderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateOrderResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order/stores/{storeId}/orders',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const cancelOrder = <ThrowOnError extends boolean = false>(
  options: Options<CancelOrderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CancelOrderResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/order/orders/{orderId}/cancel',
    ...options
  });
};

export const getCreatedVoucherTemplates = <
  ThrowOnError extends boolean = false
>(
  options?: Options<GetCreatedVoucherTemplatesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCreatedVoucherTemplatesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/voucher-templates',
    ...options
  });
};

export const createVoucherTemplate = <ThrowOnError extends boolean = false>(
  options: Options<CreateVoucherTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateVoucherTemplateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/voucher-templates',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const createVouchers = <ThrowOnError extends boolean = false>(
  options: Options<CreateVouchersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateVouchersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/voucher-templates/{voucherTemplateId}/vouchers',
    ...options
  });
};

export const disburseVouchers = <ThrowOnError extends boolean = false>(
  options: Options<DisburseVouchersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    DisburseVouchersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/voucher-templates/{voucherTemplateId}/disburse-vouchers',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getCreatedStores = <ThrowOnError extends boolean = false>(
  options?: Options<GetCreatedStoresData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCreatedStoresResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores',
    ...options
  });
};

export const createStore = <ThrowOnError extends boolean = false>(
  options: Options<CreateStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateStoreResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getTodayStoreVisits = <ThrowOnError extends boolean = false>(
  options: Options<GetTodayStoreVisitsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetTodayStoreVisitsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores/{storeId}/today-visits',
    ...options
  });
};

export const createTodayStoreVisit = <ThrowOnError extends boolean = false>(
  options: Options<CreateTodayStoreVisitData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTodayStoreVisitResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores/{storeId}/today-visits',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const createTempUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateTempUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateTempUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores/{storeId}/temp-users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const mergeTempUser = <ThrowOnError extends boolean = false>(
  options: Options<MergeTempUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    MergeTempUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores/{storeId}/temp-users/{tempUserId}/merge',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const createGame = <ThrowOnError extends boolean = false>(
  options: Options<CreateGameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGameResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores/{storeId}/games',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getAwardedPointAwards = <ThrowOnError extends boolean = false>(
  options?: Options<GetAwardedPointAwardsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetAwardedPointAwardsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/points/awards',
    ...options
  });
};

export const awardPoint = <ThrowOnError extends boolean = false>(
  options: Options<AwardPointData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AwardPointResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/points/awards',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getPaymentsInStore = <ThrowOnError extends boolean = false>(
  options: Options<GetPaymentsInStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPaymentsInStoreResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payments',
    ...options
  });
};

export const createPayment = <ThrowOnError extends boolean = false>(
  options: Options<CreatePaymentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payments',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const cancelPartialPayment = <ThrowOnError extends boolean = false>(
  options: Options<CancelPartialPaymentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CancelPartialPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payments/{paymentId}/partial-payments/{partialPaymentId}/cancel',
    ...options
  });
};

export const cancelPayment = <ThrowOnError extends boolean = false>(
  options: Options<CancelPaymentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CancelPaymentResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payments/{paymentId}/cancel',
    ...options
  });
};

export const getPayableItemsInStore = <ThrowOnError extends boolean = false>(
  options: Options<GetPayableItemsInStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPayableItemsInStoreResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payable-items',
    ...options
  });
};

export const createPayableItem = <ThrowOnError extends boolean = false>(
  options: Options<CreatePayableItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreatePayableItemResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/payable-items',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const createItem = <ThrowOnError extends boolean = false>(
  options: Options<CreateItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateItemResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/order/stores/{storeId}/items',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const completeOrder = <ThrowOnError extends boolean = false>(
  options: Options<CompleteOrderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CompleteOrderResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/order/orders/{orderId}/complete',
    ...options
  });
};

export const acceptOrder = <ThrowOnError extends boolean = false>(
  options: Options<AcceptOrderData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AcceptOrderResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/order/orders/{orderId}/accept',
    ...options
  });
};

export const sendNotification = <ThrowOnError extends boolean = false>(
  options: Options<SendNotificationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SendNotificationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/notifications',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const createGameTable = <ThrowOnError extends boolean = false>(
  options: Options<CreateGameTableData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGameTableResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/games/{gameId}/tables',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const changeGameTableParticipants = <
  ThrowOnError extends boolean = false
>(
  options: Options<ChangeGameTableParticipantsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    ChangeGameTableParticipantsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/games/{gameId}/tables/{tableId}/change-participants',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const getGameStructureTemplates = <ThrowOnError extends boolean = false>(
  options?: Options<GetGameStructureTemplatesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGameStructureTemplatesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/games/structure-templates',
    ...options
  });
};

export const createGameStructureTemplate = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateGameStructureTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGameStructureTemplateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/games/structure-templates',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const withdraw = <ThrowOnError extends boolean = false>(
  options?: Options<WithdrawData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    WithdrawResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/auth/withdarw',
    ...options
  });
};

export const registerUser = <ThrowOnError extends boolean = false>(
  options: Options<RegisterUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const registerUserFromConnectingUser = <
  ThrowOnError extends boolean = false
>(
  options: Options<RegisterUserFromConnectingUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterUserFromConnectingUserResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/register/connecting-user',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const refreshToken = <ThrowOnError extends boolean = false>(
  options: Options<RefreshTokenData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RefreshTokenResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/refresh',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const logout = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    LogoutResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/auth/logout',
    ...options
  });
};

export const login = <ThrowOnError extends boolean = false>(
  options: Options<LoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const checkAvailableNickname = <ThrowOnError extends boolean = false>(
  options: Options<CheckAvailableNicknameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CheckAvailableNicknameResponse,
    unknown,
    ThrowOnError
  >({
    url: '/auth/available-nickname',
    ...options
  });
};

export const makeManager = <ThrowOnError extends boolean = false>(
  options: Options<MakeManagerData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    MakeManagerResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/admin/users/{userId}/make-manager',
    ...options
  });
};

export const createLeague = <ThrowOnError extends boolean = false>(
  options: Options<CreateLeagueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateLeagueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/admin/leagues',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const createGameType = <ThrowOnError extends boolean = false>(
  options: Options<CreateGameTypeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateGameTypeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/admin/games/game-types',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};

export const setFileUploadCompleted = <ThrowOnError extends boolean = false>(
  options: Options<SetFileUploadCompletedData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).patch<
    SetFileUploadCompletedResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/{fileId}/upload-completed',
    ...options
  });
};

export const getReceivedVouchers = <ThrowOnError extends boolean = false>(
  options?: Options<GetReceivedVouchersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetReceivedVouchersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/voucher-templates',
    ...options
  });
};

export const getGamesInVisitedStores = <ThrowOnError extends boolean = false>(
  options?: Options<GetGamesInVisitedStoresData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGamesInVisitedStoresResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/visited-stores/games',
    ...options
  });
};

export const getList = <ThrowOnError extends boolean = false>(
  options?: Options<GetListData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetListResponse,
    unknown,
    ThrowOnError
  >({
    url: '/users',
    ...options
  });
};

export const getMe = <ThrowOnError extends boolean = false>(
  options?: Options<GetMeData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/users/me',
    ...options
  });
};

export const getStores = <ThrowOnError extends boolean = false>(
  options?: Options<GetStoresData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetStoresResponse,
    unknown,
    ThrowOnError
  >({
    url: '/stores',
    ...options
  });
};

export const getStore = <ThrowOnError extends boolean = false>(
  options: Options<GetStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetStoreResponse,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}',
    ...options
  });
};

export const getGames = <ThrowOnError extends boolean = false>(
  options: Options<GetGamesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGamesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/stores/{storeId}/games',
    ...options
  });
};

export const getRecentlyVisitedStores = <ThrowOnError extends boolean = false>(
  options?: Options<GetRecentlyVisitedStoresData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetRecentlyVisitedStoresResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/stores/visited',
    ...options
  });
};

export const getNearestStores = <ThrowOnError extends boolean = false>(
  options: Options<GetNearestStoresData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetNearestStoresResponse,
    unknown,
    ThrowOnError
  >({
    url: '/stores/nearest',
    ...options
  });
};

export const getReservations = <ThrowOnError extends boolean = false>(
  options?: Options<GetReservationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetReservationsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/reservations/games',
    ...options
  });
};

export const getMyPointRankingsOfStores = <
  ThrowOnError extends boolean = false
>(
  options?: Options<GetMyPointRankingsOfStoresData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetMyPointRankingsOfStoresResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/points/stores',
    ...options
  });
};

export const getPointRankings = <ThrowOnError extends boolean = false>(
  options: Options<GetPointRankingsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPointRankingsResponse,
    unknown,
    ThrowOnError
  >({
    url: '/points/rankings/stores/{storeId}',
    ...options
  });
};

export const getMyPointRanking = <ThrowOnError extends boolean = false>(
  options: Options<GetMyPointRankingData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMyPointRankingResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/points/rankings/stores/{storeId}/me',
    ...options
  });
};

export const getPointRankingsInLeague = <ThrowOnError extends boolean = false>(
  options: Options<GetPointRankingsInLeagueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPointRankingsInLeagueResponse,
    unknown,
    ThrowOnError
  >({
    url: '/points/rankings/leagues/{leagueId}',
    ...options
  });
};

export const getMyPointRankingInLeague = <ThrowOnError extends boolean = false>(
  options: Options<GetMyPointRankingInLeagueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetMyPointRankingInLeagueResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/points/rankings/leagues/{leagueId}/me',
    ...options
  });
};

export const getReceivedPointAwards = <ThrowOnError extends boolean = false>(
  options?: Options<GetReceivedPointAwardsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetReceivedPointAwardsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/points/awards',
    ...options
  });
};

export const getItemsInStore = <ThrowOnError extends boolean = false>(
  options: Options<GetItemsInStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetItemsInStoreResponse,
    unknown,
    ThrowOnError
  >({
    url: '/order/stores/{storeId}/items',
    ...options
  });
};

export const getItem = <ThrowOnError extends boolean = false>(
  options: Options<GetItemData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetItemResponse,
    unknown,
    ThrowOnError
  >({
    url: '/order/items/{itemId}',
    ...options
  });
};

export const authorizeWithKakaoOAuth = <ThrowOnError extends boolean = false>(
  options?: Options<AuthorizeWithKakaoOAuthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthorizeWithKakaoOAuthResponse,
    unknown,
    ThrowOnError
  >({
    url: '/oauth2/kakao/authorize',
    ...options
  });
};

export const processOAuthCallback = <ThrowOnError extends boolean = false>(
  options?: Options<ProcessOAuthCallbackData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ProcessOAuthCallbackResponse,
    unknown,
    ThrowOnError
  >({
    url: '/oauth2/callback',
    ...options
  });
};

export const getReceivedNotifications = <ThrowOnError extends boolean = false>(
  options?: Options<GetReceivedNotificationsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetReceivedNotificationsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/notifications',
    ...options
  });
};

export const getNotification = <ThrowOnError extends boolean = false>(
  options: Options<GetNotificationData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetNotificationResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/notifications/{notificationId}',
    ...options
  });
};

export const getStoreUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetStoreUsersData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetStoreUsersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/stores/{storeId}/users',
    ...options
  });
};

export const getPaymentsInStoreOfUser = <ThrowOnError extends boolean = false>(
  options: Options<GetPaymentsInStoreOfUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPaymentsInStoreOfUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/payment/stores/{storeId}/users/{userId}/payments',
    ...options
  });
};

export const getOrdersInStore = <ThrowOnError extends boolean = false>(
  options: Options<GetOrdersInStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetOrdersInStoreResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/order/stores/{storeId}/orders',
    ...options
  });
};

export const getLeagues = <ThrowOnError extends boolean = false>(
  options?: Options<GetLeaguesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetLeaguesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/leagues',
    ...options
  });
};

export const getLeague = <ThrowOnError extends boolean = false>(
  options: Options<GetLeagueData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetLeagueResponse,
    unknown,
    ThrowOnError
  >({
    url: '/leagues/{id}',
    ...options
  });
};

export const health = <ThrowOnError extends boolean = false>(
  options?: Options<HealthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthResponse,
    unknown,
    ThrowOnError
  >({
    url: '/health',
    ...options
  });
};

export const getNotFinishedGames = <ThrowOnError extends boolean = false>(
  options?: Options<GetNotFinishedGamesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetNotFinishedGamesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/games',
    ...options
  });
};

export const getGame = <ThrowOnError extends boolean = false>(
  options: Options<GetGameData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGameResponse,
    unknown,
    ThrowOnError
  >({
    url: '/games/{gameId}',
    ...options
  });
};

export const getGameTables = <ThrowOnError extends boolean = false>(
  options: Options<GetGameTablesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGameTablesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/games/{gameId}/tables',
    ...options
  });
};

export const getGameTypes = <ThrowOnError extends boolean = false>(
  options?: Options<GetGameTypesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetGameTypesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/games/game-types',
    ...options
  });
};

export const getGameType = <ThrowOnError extends boolean = false>(
  options: Options<GetGameTypeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetGameTypeResponse,
    unknown,
    ThrowOnError
  >({
    url: '/games/game-types/{gameTypeId}',
    ...options
  });
};

export const getFiles = <ThrowOnError extends boolean = false>(
  options?: Options<GetFilesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetFilesResponse,
    unknown,
    ThrowOnError
  >({
    url: '/files',
    ...options
  });
};

export const getFileById = <ThrowOnError extends boolean = false>(
  options: Options<GetFileByIdData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFileByIdResponse,
    unknown,
    ThrowOnError
  >({
    url: '/files/{fileId}',
    ...options
  });
};

export const getPresignedGetUrl = <ThrowOnError extends boolean = false>(
  options: Options<GetPresignedGetUrlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPresignedGetUrlResponse,
    unknown,
    ThrowOnError
  >({
    url: '/files/{fileId}/presigned-object-url',
    ...options
  });
};

export const getPresignedUploadUrl = <ThrowOnError extends boolean = false>(
  options: Options<GetPresignedUploadUrlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetPresignedUploadUrlResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/files/presigned-upload-url',
    ...options
  });
};

export const deleteVoucherTemplate = <ThrowOnError extends boolean = false>(
  options: Options<DeleteVoucherTemplateData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteVoucherTemplateResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http'
      }
    ],
    url: '/manager/voucher-templates/{voucherTemplateId}',
    ...options
  });
};
